@model Assig1.ViewModels.SpeedingCategoriesSearchViewModel
@using X.PagedList;

<div class="text-dark bg-gradient bg-warning p-2 my-2 border rounded">
    <h2>Speeding Categories Index</h2>
</div>

<form asp-controller="Speeding" asp-action="Index" method="get">
    <div action="form-group">
        <label for="SearchText">@Html.DisplayNameFor(m => m.SearchText)</label>
        <input asp-for="SearchText" id="AutoComplete" class="form-control" placeholder="Enter offence description" autocomplete="off"/>
    </div>

    <div class="form-group mt-2">
        <label asp-for="SpeedCode">@Html.DisplayNameFor(m => m.SpeedCode)</label>
        <select asp-for="SpeedCode" asp-items="Model.SpeedingCategories.Select(c => new SelectListItem { Value = c.SpeedCode, Text = c.SpeedDescription })" class="form-control">
            <option value="">Select a category</option>
        </select>
    </div>

    <div class="form-group mt-2">
        <label asp-for="OffenceCode">@Html.DisplayNameFor(m => m.OffenceCode)</label>
        <input asp-for="OffenceCode" class="form-control" placeholder="Enter offence code" />
    </div>

    <button type="submit" class="btn btn-primary mt-2">Search</button>
</form>

<div id="offences-speedcode-chart"></div>
<script>
    // wait for everything to load
    document.addEventListener("DOMContentLoaded", function () {
        // get the expiation data from the model
        const data = @Html.Raw(Json.Serialize(Model.OffencesBySpeedCode));
        console.log(data);

        // preparing data for D3, so: an array of month objects for the x-axis and counts for the y-axis
        const speedCodes = Object.keys(data);
        const counts = Object.values(data);

        // establishes dimensions for SVG container
        const margin = { top: 20, right: 30, bottom: 50, left: 50 };
        const svgWidth = 600;
        const svgHeight = 400;

        // create the SVG container with width and height
        const svg = d3.select('#offences-speedcode-chart')
            .append("svg")
            .attr("width", svgWidth + margin.left + margin.right)
            .attr("height", svgHeight + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        const xScale = d3.scaleBand() // scale for the x-axis using months array
            .domain(speedCodes) // formatting the display
            .range([0, svgWidth])
            .padding(0.2);

        const yScale = d3.scaleLinear()
            .domain([0, d3.max(counts)]) // sets the domain from 0 to max count
            .range([svgHeight, 0])

        svg.selectAll(".bar") // select all existing elements with bar class
            .data(counts) // binds the count array (above) to the selected elements
            .enter()
            .append("rect") // creates a rectangle for each point of data
            .attr("class", "bar") // each new rectangle is set to the bar class
            .attr("x", (d, i) => xScale(speedCodes[i])) // set x position based on xScale
            .attr("y", svgHeight) // starts the bar at the bottom
            .attr("width", xScale.bandwidth()) // width established for each bar based on xScale bandwidth
            .attr("height", 0) // sets initial height to 0
            .attr("fill", (d) => {
                return `hsl(240, 100%, ${(70 - d / d3.max(counts) * 40)}%)` // setting the colours
            })
            .transition().duration(1000) // starts and determines the length of the animation (1s)
            .delay((d, i) => i * 100)
            .attr("y", d => yScale(d)) // set y position based on yScale
            .attr("height", d => svgHeight - yScale(d)) // height based on the yScale

        svg.selectAll(".label")
            .data(counts)
            .enter()
            .append("text")
            .attr("class", "label")
            .attr("x", (d, i) => xScale(speedCodes[i]) + xScale.bandwidth() / 2)
            .attr("y", d => yScale(d) + 20)
            .attr("text-anchor", "middle")
            .attr("fill", "white")
            .attr("font-weight", "bold")
            .text(d => d);

        svg.append("g") // add a new group for the x-axis to the chart
            .attr("class", "x-axis") // class labelled as x-axis
            .attr("transform", `translate(0, ${svgHeight})`) // moves the x-axis to the bottom of the chart
            .call(d3.axisBottom(xScale)) // creates the x-axis using the established xScale settings
            .selectAll("text")
            .attr("transform", "rotate(-45)")
            .style("text-anchor", "end");

        svg.append("g") // add a new group for the y-axis to the chart
            .attr("class", "y-axis") // class labelled as y-axis
            .call(d3.axisLeft(yScale)); // creates the y-axis using the established yScale settings

        svg.append("text")
            .attr("class", "y-axis-label")
            .attr("transform", "rotate(-90)")
            .attr("y", -margin.left + 15)
            .attr("x", -svgHeight / 2)
            .attr("text-anchor", "middle")
            .text("Number of Offences");

        svg.append("text")
            .attr("x", svgWidth / 2)
            .attr("y", svgHeight + margin.bottom - 20)
            .attr("text-anchor","middle")
            .text("Speed Codes")

    });
</script>

<h3>Speeding Categories</h3>
@if (Model.Offences == null)
{
    <p>Search for an offence!</p>
}
else if (!Model.Offences.Any())
{
    <p>No offences found.</p>
}
else
{
    <div class="row">
        @foreach (var category in Model.SpeedingCategories)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@category.SpeedDescription</h5>
                        <p class="card-text">Speed Code: @category.SpeedCode</p>
                        <a href="@Url.Action("SpeedCodeBreakdown", "Speeding", new { speedCode = category.SpeedCode })">Data Breakdown</a>
                    </div>
                </div>
            </div>
        }
    </div>


    <h3>Number of records: @Model.Offences.Count() / @Model.TotalResults</h3>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Description</th>
                <th>Offence Code</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offence in Model.Offences)
            {
                <tr>
                    <td>@offence.Description</td>
                    <td>@offence.OffenceCode</td>
                    <td>
                        <a href="@Url.Action("SpeedingDetails", "Speeding", new { offenceCode = offence.OffenceCode })">View Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (Model.Offences.HasPreviousPage)
    {
        <a asp-controller="Speeding" asp-action="Index" asp-route-SearchText="@Model.SearchText" asp-route-SpeedCode="@Model.SpeedCode" asp-route-page="@(Model.Offences.PageNumber - 1)">Previous</a>

    }
    @for (int i = 1; i <= Model.Offences.PageCount; i++)
    {
        if (i == Model.Offences.PageNumber)
        {
            <strong>@i</strong>
        }
        else
        {
            <a asp-controller="Speeding" asp-action="Index" asp-route-SearchText="@Model.SearchText" asp-route-SpeedCode="@Model.SpeedCode" asp-route-page="@i">@i</a>
        }
    }

    @if (Model.Offences.HasNextPage)
    {
        <a asp-controller="Speeding" asp-action="Index" asp-route-SearchText="@Model.SearchText" asp-route-SpeedCode="@Model.SpeedCode" asp-route-page="@(Model.Offences.PageNumber + 1)">Next</a>
    }
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#AutoComplete").keypress(function () {
                var title = $("#AutoComplete").val();
                if (title.length >= 3) {
                    $.get("/Speeding/SearchSuggestions", { inputString: title }, function (data) {
                        $("#AutoComplete").autocomplete({
                            source: data
                        })
                    })
                }
            })
        });
    </script>
}