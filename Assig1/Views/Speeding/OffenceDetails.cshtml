@model Assig1.ViewModels.Offence_OffenceDetail

<h1>Offence Details for @Model.OffenceCode</h1>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayNameFor(m => m.TotalFeePaid)</h5>
                <p class="card-text">@Html.DisplayFor(m => m.TotalFeePaid)</p>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayNameFor(m => m.TotalExpiations)</h5>
                <p class="card-text">@Html.DisplayFor(m => m.TotalExpiations)</p>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayNameFor(m => m.Frequency)</h5>
                <p class="card-text">@Model.Frequency.ToString("F2")% of offences</p>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayNameFor(m => m.MostCommonLsaCode)</h5>
                <p class="card-text">@Model.MostCommonLsaCode</p>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayNameFor(m => m.MostCommonState)</h5>
                <p class="card-text">@Model.MostCommonState</p>
            </div>
        </div>
    </div>
</div>

<div id="monthly-expiations-chart"></div>
<script>
    // wait for everything to load
    document.addEventListener("DOMContentLoaded", function () {
        // get the expiation data from the model
        const data = @Html.Raw(Json.Serialize(Model.MonthlyExpiations));
        console.log(data);

        // preparing data for D3, so: an array of month objects for the x-axis and counts for the y-axis
        const months = data.map(d => new Date(d.year, d.month - 1)); // note that January = 0 here, hence -1
        const counts = data.map(d => d.count);

        // establishes dimensions for SVG container
        const margin = { top: 20, right: 30, bottom: 50, left: 50 };
        const svgWidth = 600;
        const svgHeight = 400;

        // create the SVG container with width and height
        const svg = d3.select('#monthly-expiations-chart')
            .append("svg")
            .attr("width", svgWidth + margin.left + margin.right)
            .attr("height", svgHeight + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        const xScale = d3.scaleBand() // scale for the x-axis using months array
            .domain(months.map((d, i) => d.toLocaleString('default', { month: 'long' }) + ' ' + d.getFullYear())) // formatting the display date
            .range([0, svgWidth])
            .padding(0.2);

        const yScale = d3.scaleLinear()
            .domain([0, d3.max(counts)]) // sets the domain from 0 to max count
            .range([svgHeight, 0])

        svg.selectAll(".bar") // select all existing elements with bar class
            .data(counts) // binds the count array (above) to the selected elements
            .enter()
            .append("rect") // creates a rectangle for each point of data
            .attr("class", "bar") // each new rectangle is set to the bar class
            .attr("x", (d, i) => xScale(months[i].toLocaleString('default', { month: 'long' }) + ' ' + months[i].getFullYear())) // set x position based on xScale
            .attr("y", svgHeight) // starts the bar at the bottom
            .attr("width", xScale.bandwidth()) // width established for each bar based on xScale bandwidth
            .attr("height", 0) // sets initial height to 0
            .attr("fill", (d) => {
                return `hsl(240, 100%, ${(100 - d / d3.max(counts))}%)` // setting the colours
            })
            .transition().duration(1000) // starts and determines the length of the animation (1s)
            .delay((d, i) => i * 100)
            .attr("y", d => yScale(d)) // set y position based on yScale
            .attr("height", d => svgHeight - yScale(d)) // height based on the yScale

        svg.selectAll(".label")
            .data(counts)
            .enter()
            .append("text")
            .attr("class", "label")
            .attr("x", (d, i) => xScale(months[i].toLocaleString('default', { month: 'long' }) + ' ' + months[i].getFullYear()) + xScale.bandwidth() / 2)
            .attr("y", d => yScale(d) + 20)
            .attr("text-anchor", "middle")
            .attr("fill", "white")
            .attr("font-weight", "bold")
            .text(d => d);

        svg.append("g") // add a new group for the x-axis to the chart
            .attr("class", "x-axis") // class labelled as x-axis
            .attr("transform", `translate(0, ${svgHeight})`) // moves the x-axis to the bottom of the chart
            .call(d3.axisBottom(xScale)) // creates the x-axis using the established xScale settings
            .selectAll("text")
            .attr("transform", "rotate(-45)")
            .style("text-anchor", "end");

        svg.append("g") // add a new group for the y-axis to the chart
            .attr("class", "y-axis") // class labelled as y-axis
            .call(d3.axisLeft(yScale)); // creates the y-axis using the established yScale settings

        svg.append("text")
            .attr("class", "y-axis-label")
            .attr("transform", "rotate(-90)")
            .attr("y", -margin.left + 15)
            .attr("x", -svgHeight / 2)
            .attr("text-anchor", "middle")
            .text("Count");

    });
</script>

<form method="get">
    <input type="hidden" name="offenceCode" value="@Model.OffenceCode" />

    <strong>Filter Expiations by Date Range:</strong>

    </br>

    <label for="startDate">Start Date:</label>
    <input type="date" name="startDate" id="startDate" />

    <label for="endDate">End Date: </label>
    <input type="date" name="endDate" id="endDate" />

    <button type="submit">Filter</button>
</form>

<br />

<table class="table">
    <thead>
        <tr>
            <th>Expiation ID</th>
            <th>Total Fee Amount</th>
            <th>Date</th>
            <th>Time</th>
            <th>LSA Code</th>
            <th>State</th>
            <th>Speed Limit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var expiation in Model.Expiations){
            <tr>
                <td>@expiation.ExpId</td>
                <td>@expiation.TotalFeeAmt</td>
                <td>@expiation.IncidentStartDate</td>
                <td>@expiation.IncidentStartTime</td>
                <td>@expiation.LsaCode</td>
                <td>@expiation.DriverState</td>
                <td>@expiation.LocationSpeedLimit</td>
                <td>
                    <a href="@Url.Action("Detail", "Expiations", new { id = expiation.ExpId })">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>